// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id         String   @id @default(uuid())
  name       String
  email      String   @unique
  password   String
  role       UserRole @default(customer)
  contactNo  String
  address    String
  profileImg String?

  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  reviewAndRatings ReviewAndRating[]
  orders           Order[]

  @@map("users")
}

model Category {
  id    String @id @default(uuid())
  title String @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  books     Book[]

  @@map("categories")
}

model Book {
  id              String   @id @default(uuid())
  title           String
  author          String
  price           Float
  genre           String
  publicationDate String
  categoryId      String
  category        Category @relation(fields: [categoryId], references: [id])

  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  reviewAndRatings ReviewAndRating[]
  orderedBooks     OrderedBook[]

  @@map("books")
}

model ReviewAndRating {
  id     String @id @default(uuid())
  review String
  rating Int
  userId String
  bookId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  book Book @relation(fields: [bookId], references: [id])
  user User @relation(fields: [userId], references: [id])

  @@map("review_and_ratings")
}

model Order {
  id           String        @id @default(uuid())
  userId       String
  user         User          @relation(fields: [userId], references: [id])
  status       OrderStatus   @default(pending)
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  orderedBooks OrderedBook[]

  @@map("orders")
}

model OrderedBook {
  id       String @id @default(uuid())
  bookId   String
  book     Book   @relation(fields: [bookId], references: [id])
  orderId  String
  order    Order  @relation(fields: [orderId], references: [id])
  quantity Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("ordered_books")
}

enum UserRole {
  admin
  customer
}

enum OrderStatus {
  pending
  shipped
  delivered
}
